{"ast":null,"code":"var _jsxFileName = \"/Users/Drew/Projects/bakers-math/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport RecipeIngredientContainer from \"./RecipeIngredientContainer/RecipeIngredientContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [recipe, setRecipe] = useState({\n    recipe_name: \"\",\n    flour_total: 0 // ingredientsFlour: 1,\n    // ingredientsOther: 1,\n    // ingredient_0_name: \"\",\n    // ingredient_0_percent: 0,\n    // ingredient_1_name: \"\",\n    // ingredient_1_percent: 0,\n    // ingredient_2_name: \"\",\n    // ingredient_2_percent: 0,\n    // ingredient_3_name: \"\",\n    // ingredient_3_percent: 0,\n    // ingredient_4_name: \"\",\n    // ingredient_4_percent: 0,\n    // ingredient_5_name: \"\",\n    // ingredient_5_percent: 0,\n    // ingredient_6_name: \"\",\n    // ingredient_6_percent: 0,\n    // ingredient_7_name: \"\",\n    // ingredient_7_percent: 0,\n    // ingredient_8_name: \"\",\n    // ingredient_8_percent: 0,\n    // ingredient_9_name: \"\",\n    // ingredient_9_percent: 0,\n\n  });\n  const [flours, setFlours] = useState([{\n    name: \"\",\n    percent: \"\",\n    id: Date.now()\n  }]);\n  const [ingredients, setIngredients] = useState([{\n    \"\": 0\n  }]);\n\n  const handleChangeRecipe = e => {\n    setRecipe({ ...recipe,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleChangeFlours = e => {\n    let nameArr = e.target.name.split(\"_\");\n    const propertyName = nameArr[0];\n    const id = parseInt(nameArr[1]);\n    setFlours(flours.map(key => key.id === id ? { ...key,\n      [propertyName]: e.target.value\n    } : key));\n  };\n\n  const renderFlours = () => {\n    return flours.map((key, i) => {\n      const id = key.id;\n      return /*#__PURE__*/_jsxDEV(RecipeIngredientContainer, {\n        id: id,\n        flourTotal: recipe.flour_total,\n        ingredientCount: i,\n        ingredientTextValue: key.name,\n        ingredientPercentValue: key.percent,\n        handleChange: e => handleChangeFlours(e),\n        handleSubtractClick: (e, id) => handleSubtractClick(e, id)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  const handleSubtractClick = (e, id) => {\n    e.preventDefault();\n    setFlours(flours.filter(key => key.id !== id));\n  };\n\n  const handleAddClick = e => {\n    e.preventDefault();\n    setFlours([...flours, {\n      name: \"\",\n      percent: \"\",\n      id: Date.now()\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"recipe\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          className: \"recipe-container__legend\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"recipe__input_heading\",\n          type: \"text\",\n          placeholder: \"Sourdough\",\n          value: recipe.recipe_name,\n          name: \"recipe_name\",\n          onChange: e => handleChangeRecipe(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          className: \"recipe-container__legend\",\n          children: \"Total Flour (g)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"recipe__input_heading\",\n          type: \"number\",\n          placeholder: \"g\",\n          value: recipe.flour_total,\n          name: \"flour_total\",\n          onChange: e => handleChangeRecipe(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"recipe-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recipe-banner\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"recipe-banner__text\",\n            children: \"Flour\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"recipe-button_add\",\n            onClick: e => handleAddClick(e, \"flour\"),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), renderFlours()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"jT3T5A39DjSYSt63mUbeNG7KGeg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Drew/Projects/bakers-math/src/App.js"],"names":["useState","RecipeIngredientContainer","App","recipe","setRecipe","recipe_name","flour_total","flours","setFlours","name","percent","id","Date","now","ingredients","setIngredients","handleChangeRecipe","e","target","value","handleChangeFlours","nameArr","split","propertyName","parseInt","map","key","renderFlours","i","handleSubtractClick","preventDefault","filter","handleAddClick"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,yBAAP,MAAsC,uDAAtC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC;AACnCK,IAAAA,WAAW,EAAE,EADsB;AAEnCC,IAAAA,WAAW,EAAE,CAFsB,CAGnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxBmC,GAAD,CAApC;AA2BA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,CACnC;AAAES,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,OAAO,EAAE,EAArB;AAAyBC,IAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL;AAA7B,GADmC,CAAD,CAApC;AAGA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,CAAC;AAAE,QAAI;AAAN,GAAD,CAAD,CAA9C;;AAEA,QAAMgB,kBAAkB,GAAIC,CAAD,IAAO;AAChCb,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACc,CAAC,CAACC,MAAF,CAAST,IAAV,GAAiBQ,CAAC,CAACC,MAAF,CAASC;AAAvC,KAAD,CAAT;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAIH,CAAD,IAAO;AAChC,QAAII,OAAO,GAAGJ,CAAC,CAACC,MAAF,CAAST,IAAT,CAAca,KAAd,CAAoB,GAApB,CAAd;AACA,UAAMC,YAAY,GAAGF,OAAO,CAAC,CAAD,CAA5B;AACA,UAAMV,EAAE,GAAGa,QAAQ,CAACH,OAAO,CAAC,CAAD,CAAR,CAAnB;AACAb,IAAAA,SAAS,CACPD,MAAM,CAACkB,GAAP,CAAYC,GAAD,IACTA,GAAG,CAACf,EAAJ,KAAWA,EAAX,GAAgB,EAAE,GAAGe,GAAL;AAAU,OAACH,YAAD,GAAgBN,CAAC,CAACC,MAAF,CAASC;AAAnC,KAAhB,GAA6DO,GAD/D,CADO,CAAT;AAKD,GATD;;AAWA,QAAMC,YAAY,GAAG,MAAM;AACzB,WAAOpB,MAAM,CAACkB,GAAP,CAAW,CAACC,GAAD,EAAME,CAAN,KAAY;AAC5B,YAAMjB,EAAE,GAAGe,GAAG,CAACf,EAAf;AACA,0BACE,QAAC,yBAAD;AAEE,QAAA,EAAE,EAAEA,EAFN;AAGE,QAAA,UAAU,EAAER,MAAM,CAACG,WAHrB;AAIE,QAAA,eAAe,EAAEsB,CAJnB;AAKE,QAAA,mBAAmB,EAAEF,GAAG,CAACjB,IAL3B;AAME,QAAA,sBAAsB,EAAEiB,GAAG,CAAChB,OAN9B;AAOE,QAAA,YAAY,EAAGO,CAAD,IAAOG,kBAAkB,CAACH,CAAD,CAPzC;AAQE,QAAA,mBAAmB,EAAE,CAACA,CAAD,EAAIN,EAAJ,KAAWkB,mBAAmB,CAACZ,CAAD,EAAIN,EAAJ;AARrD,SACOA,EADP;AAAA;AAAA;AAAA;AAAA,cADF;AAYD,KAdM,CAAP;AAeD,GAhBD;;AAkBA,QAAMkB,mBAAmB,GAAG,CAACZ,CAAD,EAAIN,EAAJ,KAAW;AACrCM,IAAAA,CAAC,CAACa,cAAF;AACAtB,IAAAA,SAAS,CAACD,MAAM,CAACwB,MAAP,CAAeL,GAAD,IAASA,GAAG,CAACf,EAAJ,KAAWA,EAAlC,CAAD,CAAT;AACD,GAHD;;AAKA,QAAMqB,cAAc,GAAIf,CAAD,IAAO;AAC5BA,IAAAA,CAAC,CAACa,cAAF;AACAtB,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAY;AAAEE,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,OAAO,EAAE,EAArB;AAAyBC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL;AAA7B,KAAZ,CAAD,CAAT;AACD,GAHD;;AAKA,sBACE;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAA,2BACE;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,0BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,uBADZ;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,WAAW,EAAC,WAHd;AAIE,UAAA,KAAK,EAAEV,MAAM,CAACE,WAJhB;AAKE,UAAA,IAAI,EAAC,aALP;AAME,UAAA,QAAQ,EAAGY,CAAD,IAAOD,kBAAkB,CAACC,CAAD;AANrC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,0BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,uBADZ;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,WAAW,EAAC,GAHd;AAIE,UAAA,KAAK,EAAEd,MAAM,CAACG,WAJhB;AAKE,UAAA,IAAI,EAAC,aALP;AAME,UAAA,QAAQ,EAAGW,CAAD,IAAOD,kBAAkB,CAACC,CAAD;AANrC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,eAuBE;AAAA;AAAA;AAAA;AAAA,cAvBF,eAwBE;AAAS,QAAA,SAAS,EAAC,gBAAnB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,kCACE;AAAG,YAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,YAAA,SAAS,EAAC,mBADZ;AAEE,YAAA,OAAO,EAAGA,CAAD,IAAOe,cAAc,CAACf,CAAD,EAAI,OAAJ,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAUGU,YAAY,EAVf;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD;;GA/HQzB,G;;KAAAA,G;AAiIT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport RecipeIngredientContainer from \"./RecipeIngredientContainer/RecipeIngredientContainer\";\n\nfunction App() {\n  const [recipe, setRecipe] = useState({\n    recipe_name: \"\",\n    flour_total: 0,\n    // ingredientsFlour: 1,\n    // ingredientsOther: 1,\n    // ingredient_0_name: \"\",\n    // ingredient_0_percent: 0,\n    // ingredient_1_name: \"\",\n    // ingredient_1_percent: 0,\n    // ingredient_2_name: \"\",\n    // ingredient_2_percent: 0,\n    // ingredient_3_name: \"\",\n    // ingredient_3_percent: 0,\n    // ingredient_4_name: \"\",\n    // ingredient_4_percent: 0,\n    // ingredient_5_name: \"\",\n    // ingredient_5_percent: 0,\n    // ingredient_6_name: \"\",\n    // ingredient_6_percent: 0,\n    // ingredient_7_name: \"\",\n    // ingredient_7_percent: 0,\n    // ingredient_8_name: \"\",\n    // ingredient_8_percent: 0,\n    // ingredient_9_name: \"\",\n    // ingredient_9_percent: 0,\n  });\n\n  const [flours, setFlours] = useState([\n    { name: \"\", percent: \"\", id: Date.now() },\n  ]);\n  const [ingredients, setIngredients] = useState([{ \"\": 0 }]);\n\n  const handleChangeRecipe = (e) => {\n    setRecipe({ ...recipe, [e.target.name]: e.target.value });\n  };\n\n  const handleChangeFlours = (e) => {\n    let nameArr = e.target.name.split(\"_\");\n    const propertyName = nameArr[0];\n    const id = parseInt(nameArr[1]);\n    setFlours(\n      flours.map((key) =>\n        key.id === id ? { ...key, [propertyName]: e.target.value } : key\n      )\n    );\n  };\n\n  const renderFlours = () => {\n    return flours.map((key, i) => {\n      const id = key.id;\n      return (\n        <RecipeIngredientContainer\n          key={id}\n          id={id}\n          flourTotal={recipe.flour_total}\n          ingredientCount={i}\n          ingredientTextValue={key.name}\n          ingredientPercentValue={key.percent}\n          handleChange={(e) => handleChangeFlours(e)}\n          handleSubtractClick={(e, id) => handleSubtractClick(e, id)}\n        />\n      );\n    });\n  };\n\n  const handleSubtractClick = (e, id) => {\n    e.preventDefault();\n    setFlours(flours.filter((key) => key.id !== id));\n  };\n\n  const handleAddClick = (e) => {\n    e.preventDefault();\n    setFlours([...flours, { name: \"\", percent: \"\", id: Date.now() }]);\n  };\n\n  return (\n    <main className=\"recipe\">\n      <form>\n        <div className=\"recipe-container\">\n          <legend className=\"recipe-container__legend\">Name</legend>\n          <input\n            className=\"recipe__input_heading\"\n            type=\"text\"\n            placeholder=\"Sourdough\"\n            value={recipe.recipe_name}\n            name=\"recipe_name\"\n            onChange={(e) => handleChangeRecipe(e)}\n          />\n        </div>\n        <div className=\"recipe-container\">\n          <legend className=\"recipe-container__legend\">Total Flour (g)</legend>\n          <input\n            className=\"recipe__input_heading\"\n            type=\"number\"\n            placeholder=\"g\"\n            value={recipe.flour_total}\n            name=\"flour_total\"\n            onChange={(e) => handleChangeRecipe(e)}\n          />\n        </div>\n        <hr />\n        <section className=\"recipe-section\">\n          <div className=\"recipe-banner\">\n            <p className=\"recipe-banner__text\">Flour</p>\n            <button\n              className=\"recipe-button_add\"\n              onClick={(e) => handleAddClick(e, \"flour\")}\n            >\n              Add\n            </button>\n          </div>\n          {renderFlours()}\n        </section>\n        {/* <section>\n          <p className=\"recipe-banner-text\">Ingredients</p>\n          {renderIngredients()}\n          <button\n            className=\"recipe-button_add\"\n            onClick={(e) => handleAddClick(e, \"ingredientsOther\")}\n          >\n            Add\n          </button>\n        </section> */}\n      </form>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}